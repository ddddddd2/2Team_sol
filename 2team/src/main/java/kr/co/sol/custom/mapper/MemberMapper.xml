<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.sol.custom.dao.MemberDAO">
  	<select id="idCheck" parameterType="string"  resultType="int">
    	select count(id) cnt from member where id = #{id}
  	</select>
  	
  	<select id="loginProc" parameterType="mdto" resultType="mdto">
  		SELECT ID, NAME, ROLE, PASSWD 
      	FROM MEMBER 
      	WHERE id = #{id} 
      	and passwd = #{passwd}
  	</select>
  	
  	<insert id="signUpProc" parameterType="mdto">
  		<selectKey keyProperty="no" resultType="int" order="BEFORE">
	       SELECT NVL(MAX(no),0)+1 no FROM member
      	</selectKey>
  		
  		insert into member(no,id,passwd,name,email,phone,gender)
  		values( #{no},
  				#{id},
  				#{passwd},
  				#{name},
  				#{email},
  				#{phone},
  				#{gender})
  	</insert>
  	<select id="loginPro" parameterType="mdto" resultType="mdto">
  		select no, role from member where id = #{id} and passwd = #{passwd}
  	</select>
  	<select id="getMemberNo" parameterType="string" resultType="int">
  		select no from member where id = #{idKey}
  	</select>

  	<select id="getMember" resultType="mdto">
  		select
  			no,
	  		grade_name,
	  		id,
	  		passwd,
	  		name,
	  		email,
	  		phone,
	  		gender,
  			role
  		from member
  	</select>
  	<select id="getMemberInfo" parameterType="String" resultType="mdto">
  		select
	  		grade_name,
	  		id,
	  		passwd,
	  		nick_name,
	  		name,
	  		email,
	  		phone,
	  		gender,
  			role
  		from member
  		where
  			id = #{id}
  	</select>
  	<select id="nickCheck" parameterType="String" resultType="Integer">
  		select count(nick_name) from member where nick_name = #{nick_name}
  	</select>
  	
  	<select id="emailCheck" parameterType="String" resultType="Integer">
  		select count(email) from member where email = #{email}
  	</select>
  	
  	<update id="updateMember">
	update member set
			nick_name = #{nick_name},
  			phone = #{phone},
  			passwd = #{passwd},
  			email = #{email}
	where not exists
		(select nick_name, phone, passwd, email
		from
			(select nick_name, phone, email
			from member where id != #{id})
			where nick_name = #{nick_name} or phone = #{phone} or email =#{email})
	and id = #{id}
  	</update>
  	<!-- Booking -->
	<select id="getBookingList" parameterType="String" resultType="bdto">
		select 	
			b.no ,res_no ,mem_no ,date1 ,date2 ,content ,price ,status ,menu
		 from 
		 	booking b inner join member m on b.mem_no = m.no
		 where
		 	m.id = #{id}
	</select>

	<!-- Review -->
	<select id="getReviewList" parameterType="String" resultType="rdto">
		select 
			no, res_no, mem_no, mem_id, date1, rating, content 
		from 
			review 
		where
			mem_id = #{id}
	</select>
	<!-- Favorite -->

  	<select id="getFavoriteList" parameterType="String" resultType="resdto">
	  	select 
	  		r.name 
	  	from 
	  		restaurant r where no IN
				(select 
					res_no 
				from 
					favorites f join member m on f.mem_no = m.no and m.id = #{id})
	</select>
	<!-- Qna -->
	<select id="getQnaList" parameterType="String" resultType="qdto">
		select 	
			q.no, mem_no, subject, contents, q.createdate, qnatype
		 from 
		 	qna q join member m on q.mem_no = m.no
		 where
		 	m.id = #{id}
	</select>
	<!-- Member(메뉴바 쪽에 있는 이름, 회원가입 날짜) -->
	<select id="getMemberList" resultType="mdto">
		select 
			no, grade_name, id, passwd, name, email, phone, gender, role, info_offering, nick_name, createdate, image 
		from
			member
		where
			id = #{id}
	</select>
</mapper>